#version 450
#pragma shader_stage(vertex)
layout(location=0) in vec3 position;
layout(location=1) in vec2 texcoord;
layout(location=2) in vec3 normal;
layout(location=3) in vec3 offset;

// uniform variable can be viewed as a constant
// you can set the uniform variable by glUniformXXXXXXXX
uniform mat4 model;

layout(std140, binding=0) uniform UserData {
	mat4 vp;
} data;

// 'out' means vertex shader output for fragment shader
layout(location=0) out vec3 vPos;
layout(location=1) out vec3 vNormal;
layout(location=2) out vec2 vUV;

void main()
{
	mat4 offset_mat = mat4(
		vec4(1.0, 0.0, 0.0, 0.0),
		vec4(0.0, 1.0, 0.0, 0.0),
		vec4(0.0, 0.0, 1.0, 0.0),
		vec4(offset.x, offset.y, offset.z, 1.0)
	);

	mat4 newmodel = offset_mat*model;
	vPos = vec3(newmodel*vec4(position, 1.0));
	vNormal = normalize(vec3(newmodel * vec4(normal, 0.0)));
	vUV = texcoord;
	
	gl_Position=data.vp*newmodel*vec4(position, 1.0);
}